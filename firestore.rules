rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - users can read/write their own document
    match /users/{userId} {
      // Allow users to read their own document
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow authenticated users to read basic info of other users (for contact addition)
      allow read: if request.auth != null;
      
      // User's contacts subcollection - users can read/write their own contacts
      match /contacts/{contactId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Chats collection - users can read/write chats they participate in
    match /chats/{chatId} {
      allow read, write: if request.auth != null && 
        (resource == null || 
         resource.data.participantIds.hasAny([request.auth.uid]) ||
         request.resource.data.participantIds.hasAny([request.auth.uid]));
      
      // Participants subcollection
      match /participants/{participantId} {
        allow read, write: if request.auth != null && request.auth.uid == participantId;
      }
      
      // Messages subcollection - users can read messages in chats they're part of, write their own messages
      match /messages/{messageId} {
        allow read: if request.auth != null && 
          exists(/databases/$(database)/documents/chats/$(chatId)) &&
          get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
        allow write: if request.auth != null && 
          request.resource.data.senderId == request.auth.uid &&
          exists(/databases/$(database)/documents/chats/$(chatId)) &&
          get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
      }
    }

    // Calls collection - for WebRTC signaling
    match /calls/{callId} {
      allow read, write: if request.auth != null && 
        (resource == null || 
         resource.data.participants.hasAny([request.auth.uid]) ||
         request.resource.data.participants.hasAny([request.auth.uid]));
      
      // Signals subcollection
      match /signals/{signalId} {
        allow read, write: if request.auth != null && 
          (request.resource.data.from == request.auth.uid || 
           request.resource.data.to == request.auth.uid || 
           (resource != null && (resource.data.from == request.auth.uid || resource.data.to == request.auth.uid)));
      }
    }
  }
} 